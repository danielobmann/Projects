T_prior = dunif(parameter[length(parameter)-1], min=1, max = 1e4, log = TRUE)
sigma_prior = dunif(parameter[length(parameter)], log = TRUE)
coeff_prior + T_prior + sigma_prior
}
loglikelihood = function(y, parameter, delta_t=1e-1) {
T = parameter[length(parameter) - 1]
tx = seq(0, T, by=delta_t)
idx = seq(1, length(tx), by = as.integer(1/delta_t))[1:length(y)]
I = (model(parameter, u0, delta_t=delta_t)$I)[idx]
ret = sum(dnorm(y, mean=I, sd=parameter[length(parameter)], log = TRUE))
if (T < length(y)) {
ret = -500
}
return(ret)
}
logposterior = function(parameter, y, delta_t=1e-1){
logprior(parameter) + loglikelihood(y = y, parameter = parameter, delta_t = delta_t)
}
proposal = function(parameter, proposal_sd){
rnorm(length(parameter), mean=parameter, sd=proposal_sd)
}
run_MH = function(parameter0, prop_sd, y, niter=1e4, delta_t=1/24){
parameter.save = matrix(NA, nrow=niter, ncol=length(parameter0)+1)
for (i in 1:niter) {
parameter.star = proposal(parameter = parameter0, proposal_sd = prop_sd)
alpha = logposterior(parameter.star, y, delta_t) - logposterior(parameter0, y, delta_t)
if (!is.na(alpha) && runif(1) <= exp(alpha)) {
parameter.save[i,] = c(parameter.star, 1)
parameter0 = parameter.star
} else {
parameter.save[i,] = c(parameter.star, 0)
}
if (i %% 100 == 0) {
print(paste0("Finished ", i, " iterations!", sep=""))
print(paste0("Percentage of accepted samples ", mean(parameter.save[, ncol(parameter.save)], na.rm = TRUE)))
}
}
parameter.save = data.frame(parameter.save)
colnames(parameter.save) = c(paste("beta", 0:3, sep = ""), paste("gamma", 0:3, sep = ""), "T", "Sigma", "Accepted")
parameter.save
}
y
# --------------------------------------------------------------
# Run simulations
y = df$T/maximum_tirol
delta_t = 1e-1
# PARAMETER: C(infection_rate_coefficients, recovery_rate_coefficients, T, sigma)
prop_sd = c(rep(0.1, 8), 1, 0.01)
parameter0 = c(rep(0.1, 8), 50, 0.1)
samples = run_MH(parameter0, prop_sd, y = y, niter = 1e4, delta_t = delta_t)
run_MH = function(parameter0, prop_sd, y, niter=1e4, delta_t=1/24){
parameter.save = matrix(NA, nrow=niter, ncol=length(parameter0)+1)
for (i in 1:niter) {
parameter.star = proposal(parameter = parameter0, proposal_sd = prop_sd)
alpha = logposterior(parameter.star, y, delta_t) - logposterior(parameter0, y, delta_t)
if (!is.na(alpha) && runif(1) <= exp(alpha)) {
parameter.save[i,] = c(parameter.star, 1)
parameter0 = parameter.star
} else {
parameter.save[i,] = c(parameter.star, 0)
}
if (i %% 100 == 0) {
print(paste0("Finished ", i, " iterations!", sep=""))
print(paste0("Percentage of accepted samples ", mean(parameter.save[, ncol(parameter.save)], na.rm = TRUE)))
}
}
parameter.save = data.frame(parameter.save)
colnames(parameter.save) = c(paste("beta", 0:3, sep = ""), paste("gamma", 0:3, sep = ""), "T", "Sigma", "Accepted")
parameter.save
}
# --------------------------------------------------------------
# Run simulations
y = df$T/maximum_tirol
delta_t = 1e-1
# PARAMETER: C(infection_rate_coefficients, recovery_rate_coefficients, T, sigma)
prop_sd = c(rep(0.1, 8), 1, 0.01)
parameter0 = c(rep(0.1, 8), 50, 0.1)
samples = run_MH(parameter0, prop_sd, y = y, niter = 1e3, delta_t = delta_t)
accepted_samples = samples[samples$Accepted == 1, -ncol(samples)]
# PARAMETER: C(infection_rate_coefficients, recovery_rate_coefficients, T, sigma)
prop_sd = c(rep(0.1, 8), 1, 0.01)
parameter0 = c(rep(0.1, 8), 50, 0.1)
samples = run_MH(parameter0, prop_sd, y = y, niter = 1e3, delta_t = delta_t)
accepted_samples = samples[samples$Accepted == 1, -ncol(samples)]
summary(accepted_samples)
accepted_samples = samples[samples$Accepted == 1, -ncol(samples)]
summary(accepted_samples)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = as.numeric(apply(samples, 2, mean))
T = m[length(m)-1]
tx = seq(0, T, by=delta_t)
out = model(m, u0, delta_t = delta_t)
matplot(tx, out$I, type = 'l', col = 'blue', lwd = 2)
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0)
warnings()
loglikelihood(accepted_samples[1, ])
loglikelihood(y, accepted_samples[1, ])
loglikelihood(y, as.numeric(accepted_samples[1, ]))
s1 = as.numeric(accepted_samples[1,])
s1
model(s1, u0, delta_t)
test = model(s1, u0, delta_t)
warnings()
source('sir_implementation.R')
test = model(s1, u0, delta_t)
warnings()
test
u0
u0 = c(1-I0, I0, 0)
plot_results(accepted_samples, y, u0)
.sir_step_nonlinear(u0)
.sir_step_nonlinear(u0, r)
.sir_step_nonlinear(u0, r=r)
.sir_step_nonlinear(u0, r=2)
.sir_step_nonlinear(u0, 2)
.sir_step_nonlinear(u0, r=2)
.sir_step_nonlinear(u0, r=function(t, u) 2)
.sir_step_nonlinear(u0, r=function(t, u) 2, rho = function(t,u 2))
.sir_step_nonlinear(u0, r=function(t, u) 2, rho = function(t,u) 2)
.sir_step_nonlinear(u0, 1, r=function(t, u) 2, rho = function(t,u) 2)
u0
I0 = df$T[1]/maximum_tirol # Initial value must be chosen such that it reflects the first time numer of people infected
u0 = c(1-I0, I0, 0)
u0
.sir_step_nonlinear(u0, 1, r=function(t, u) 2, rho = function(t,u) 2)
I0 = df$T[1]/maximum_tirol # Initial value must be chosen such that it reflects the first time numer of people infected
u0 = c(1-I0, I0, 0)
logprior = function(parameter) {
coeff_prior = sum(dnorm(parameter[-length(parameter)], mean=0, sd=100, log = TRUE))
T_prior = dunif(parameter[length(parameter)-1], min=1, max = 1e4, log = TRUE)
sigma_prior = dunif(parameter[length(parameter)], log = TRUE)
coeff_prior + T_prior + sigma_prior
}
loglikelihood = function(y, parameter, delta_t=1e-1) {
T = parameter[length(parameter) - 1]
tx = seq(0, T, by=delta_t)
idx = seq(1, length(tx), by = as.integer(1/delta_t))[1:length(y)]
I = (model(parameter, u0, delta_t=delta_t)$I)[idx]
ret = sum(dnorm(y, mean=I, sd=parameter[length(parameter)], log = TRUE))
if (T < length(y)) {
ret = -500
}
return(ret)
}
logposterior = function(parameter, y, delta_t=1e-1){
logprior(parameter) + loglikelihood(y = y, parameter = parameter, delta_t = delta_t)
}
proposal = function(parameter, proposal_sd){
rnorm(length(parameter), mean=parameter, sd=proposal_sd)
}
run_MH = function(parameter0, prop_sd, y, niter=1e4, delta_t=1/24){
parameter.save = matrix(NA, nrow=niter, ncol=length(parameter0)+1)
for (i in 1:niter) {
parameter.star = proposal(parameter = parameter0, proposal_sd = prop_sd)
alpha = logposterior(parameter.star, y, delta_t) - logposterior(parameter0, y, delta_t)
if (!is.na(alpha) && runif(1) <= exp(alpha)) {
parameter.save[i,] = c(parameter.star, 1)
parameter0 = parameter.star
} else {
parameter.save[i,] = c(parameter.star, 0)
}
if (i %% 100 == 0) {
print(paste0("Finished ", i, " iterations!", sep=""))
print(paste0("Percentage of accepted samples ", mean(parameter.save[, ncol(parameter.save)], na.rm = TRUE)))
}
}
parameter.save = data.frame(parameter.save)
colnames(parameter.save) = c(paste("beta", 0:3, sep = ""), paste("gamma", 0:3, sep = ""), "T", "Sigma", "Accepted")
parameter.save
}
# --------------------------------------------------------------
# Run simulations
y = df$T/maximum_tirol
delta_t = 1e-1
# PARAMETER: C(infection_rate_coefficients, recovery_rate_coefficients, T, sigma)
prop_sd = c(rep(0.1, 8), 1, 0.01)
parameter0 = c(rep(0.1, 8), 50, 0.1)
samples = run_MH(parameter0, prop_sd, y = y, niter = 1e2, delta_t = delta_t)
warnings()
accepted_samples = samples[samples$Accepted == 1, -ncol(samples)]
summary(accepted_samples)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = as.numeric(apply(samples, 2, mean))
T = m[length(m)-1]
tx = seq(0, T, by=delta_t)
out = model(m, u0, delta_t = delta_t)
matplot(tx, out$I, type = 'l', col = 'blue', lwd = 2)
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = as.numeric(apply(samples, 2, mean))
T = m[length(m)-1]
tx = seq(0, T, by=delta_t)
out = model(m, u0, delta_t = delta_t)
print(out)
matplot(tx, out$I, type = 'l', col = 'blue', lwd = 2)
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = as.numeric(apply(samples, 2, mean))
T = m[length(m)-1]
tx = seq(0, T, by=delta_t)
out = model(m, u0, delta_t = delta_t)
print(dim(out))
print(len(tx))
matplot(tx, out$I, type = 'l', col = 'blue', lwd = 2)
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = as.numeric(apply(samples, 2, mean))
T = m[length(m)-1]
tx = seq(0, T, by=delta_t)
out = model(m, u0, delta_t = delta_t)
print(dim(out))
print(length(tx))
matplot(tx, out$I, type = 'l', col = 'blue', lwd = 2)
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = as.numeric(apply(samples, 2, mean))
T = as.integer(m[length(m)-1])
tx = seq(0, T, by=delta_t)
out = model(m, u0, delta_t = delta_t)
print(dim(out))
print(length(tx))
matplot(tx, out$I, type = 'l', col = 'blue', lwd = 2)
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = as.numeric(apply(samples, 2, mean))
T = as.integer(m[length(m)-1])
tx = seq(0, T, by=delta_t)
out = model(m, u0, delta_t = delta_t)
matplot(tx, out$I, type = 'l', col = 'blue', lwd = 2)
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
u0
accepted_samples
accepted_samples[1, ]
p = as.numeric(accepted_samples[1, ])
model(p, u0, delta_t)
plot_results = function(samples, y, u0, delta_t=1e-1){
#m = as.numeric(apply(samples, 2, mean))
m = as.numeric(samples[1,])
T = as.integer(m[length(m)-1])
tx = seq(0, T, by=delta_t)
out = model(m, u0, delta_t = delta_t)
matplot(tx, out$I, type = 'l', col = 'blue', lwd = 2)
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
sample(1:nrow(accepted_samples))
sample(1:nrow(accepted_samples), 1)
plot_results = function(samples, y, u0, delta_t=1e-1){
#m = as.numeric(apply(samples, 2, mean))
m = as.numeric(samples[sample(1:nrow(samples), 1),])
T = as.integer(m[length(m)-1])
tx = seq(0, T, by=delta_t)
out = model(m, u0, delta_t = delta_t)
matplot(tx, out$I, type = 'l', col = 'blue', lwd = 2)
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results = function(samples, y, u0, delta_t=1e-1){
#m = as.numeric(apply(samples, 2, mean))
m = as.numeric(samples[sample(1:nrow(samples), 1),])
T = as.integer(m[length(m)-1])
tx = seq(0, T, by=delta_t)
out = model(m, u0, delta_t = delta_t)
matplot(tx, out$I, type = 'l', col = 'blue', lwd = 2)
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results = function(samples, y, u0, delta_t=1e-1){
#m = as.numeric(apply(samples, 2, mean))
m = as.numeric(samples[sample(1:nrow(samples), 1),])
T = as.integer(m[length(m)-1])
tx = seq(0, T, by=delta_t)
out = model(m, u0, delta_t = delta_t)
matplot(tx, out$I, type = 'l', col = 'blue', lwd = 2)
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results = function(samples, y, u0, delta_t=1e-1){
#m = as.numeric(apply(samples, 2, mean))
i = sample(1:nrow(samples), 1)
print(i)
m = as.numeric(samples[i,])
T = as.integer(m[length(m)-1])
tx = seq(0, T, by=delta_t)
out = model(m, u0, delta_t = delta_t)
matplot(tx, out$I, type = 'l', col = 'blue', lwd = 2)
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
apply(m, 1, function(x) model(x, u0, delta_t))
apply(m, 1, function(x) model(x, u0, delta_t)$I)
apply(m, 2, function(x) model(x, u0, delta_t)$I)
apply(m, 1, function(x) model(x, u0, delta_t))
apply(m, 1, function(x) model(x, u0, delta_t)$I)
apply(m, 1, function(x) as.numeric(model(x, u0, delta_t)$I))
plot_results = function(samples, y, u0, delta_t=1e-1){
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
tx = seq(0, as.integer(m[length(m)-1]), by=delta_t)
matplot(tx, fit, type = 'l', col = c(1,2,1), lwd = c(1,2,1))
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
print(dim(fit))
tx = seq(0, as.integer(m[length(m)-1]), by=delta_t)
matplot(tx, fit, type = 'l', col = c(1,2,1), lwd = c(1,2,1))
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
fit
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
fit
m
plot_results = function(samples, y, u0, delta_t=1e-1){
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
m$T = max(m$T)
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
tx = seq(0, as.integer(m[length(m)-1]), by=delta_t)
matplot(tx, fit, type = 'l', col = c(1,2,1), lwd = c(1,2,1))
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
m$T
dim(m)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
m[, ncol(m)-1] = max(m[, ncol(m) - 1])
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
tx = seq(0, as.integer(m[length(m)-1]), by=delta_t)
matplot(tx, fit, type = 'l', col = c(1,2,1), lwd = c(1,2,1))
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
m[, ncol(m)-1] = max(m[, ncol(m) - 1])
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
tx = seq(0, as.integer(m[length(m)-1]), by=delta_t)
print(length(tx))
print(fit)
matplot(tx, fit, type = 'l', col = c(1,2,1), lwd = c(1,2,1))
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
m[, ncol(m)-1] = max(m[, ncol(m) - 1])
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
tx = seq(0, as.integer(m[ncol(m)-1]), by=delta_t)
print(length(tx))
print(fit)
matplot(tx, fit, type = 'l', col = c(1,2,1), lwd = c(1,2,1))
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
m[, ncol(m)-1] = max(m[, ncol(m) - 1])
print(m)
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
tx = seq(0, as.integer(m[ncol(m)-1]), by=delta_t)
print(length(tx))
print(fit)
matplot(tx, fit, type = 'l', col = c(1,2,1), lwd = c(1,2,1))
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
m[, ncol(m)-1] = max(m[, ncol(m) - 1])
print(m)
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
tx = seq(0, as.integer(m[1, ncol(m)-1]), by=delta_t)
matplot(tx, fit, type = 'l', col = c(1,2,1), lwd = c(1,2,1))
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
m[, ncol(m)-1] = max(m[, ncol(m) - 1])
print(m)
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
tx = seq(0, as.integer(m[1, ncol(m)-1]), by=delta_t)
matplot(tx, fit, type = 'l', col = c(1,2,1), lwd = c(1,2,1), lty = c(1,2,1))
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
m[, ncol(m)-1] = max(m[, ncol(m) - 1])
print(m)
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
tx = seq(0, as.integer(m[1, ncol(m)-1]), by=delta_t)
matplot(tx, fit, type = 'l', col = c(1,2,1), lwd = c(1,2,1), lty = c(2,1,2))
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
y
plot_results = function(samples, y, u0, delta_t=1e-1){
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
m[, ncol(m)-1] = max(m[, ncol(m) - 1])
print(m)
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
tx = seq(0, as.integer(m[1, ncol(m)-1]), by=delta_t)
matplot(tx, fit, type = 'l', col = c(1,2,1), lwd = c(1,2,1), lty = c(2,1,2), ylim = c(0, 0.3))
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
plot_results = function(samples, y, u0, delta_t=1e-1){
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
m[, ncol(m)-1] = max(m[, ncol(m) - 1])
print(m)
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
tx = seq(0, as.integer(m[1, ncol(m)-1]), by=delta_t)
matplot(tx, fit, type = 'l', col = c(1,2,1), lwd = c(1,2,1), lty = c(2,1,2), ylim = c(0, max(fit$`90%`)))
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
fit
fit$`90%`
plot_results = function(samples, y, u0, delta_t=1e-1){
m = apply(accepted_samples, 2, function(x) c(quantile(x, probs = 0.1), mean(x), quantile(x, probs = 0.9)))
m[, ncol(m)-1] = max(m[, ncol(m) - 1])
fit = apply(m, 1, function(x) as.numeric(model(x, u0 = u0, delta_t = delta_t)$I))
tx = seq(0, as.integer(m[1, ncol(m)-1]), by=delta_t)
matplot(tx, fit, type = 'l', col = c(1,2,1), lwd = c(1,2,1), lty = c(2,1,2))
idx = seq(1, length(y)/delta_t, by = as.integer(1/delta_t))
points(tx[idx], y, col='red')
}
plot_results(accepted_samples, y, u0, delta_t = delta_t)
# --------------------------------------------------------------
# Run simulations
y = df$T/maximum_tirol
delta_t = 1e-1
# PARAMETER: C(infection_rate_coefficients, recovery_rate_coefficients, T, sigma)
prop_sd = c(rep(0.1, 8), 1, 0.01)
parameter0 = c(rep(0.1, 8), 50, 0.1)
summary(accepted_samples)
samples = run_MH(parameter0, prop_sd, y = y, niter = 1e3, delta_t = delta_t)
accepted_samples = samples[samples$Accepted == 1, -ncol(samples)]
summary(accepted_samples)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
# PARAMETER: C(infection_rate_coefficients, recovery_rate_coefficients, T, sigma)
prop_sd = c(rep(0.1, 8), 1, 0.01)
parameter0 = c(rep(0.1, 8), 50, 0.1)
samples = run_MH(parameter0, prop_sd, y = y, niter = 1e4, delta_t = delta_t)
accepted_samples = samples[samples$Accepted == 1, -ncol(samples)]
summary(accepted_samples)
summary(accepted_samples)
plot_results(accepted_samples, y, u0, delta_t = delta_t)
